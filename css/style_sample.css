@charset "UTF-8";


/*
  他にもFlexboxを使ったレイアウト方法でも実現することができます。
CSS flexible box の利用 - CSS | MDN
フレキシブルイメージ(flexible-images)　　から
*/
.box{
    height: 500px;　　
    max-width: 100%;
    background-image:url(../images/img_g.jpg);
    background-size: cover;
    background-position: center center;
}

/*フレキシブルイメージ(flexible-images)　　まで*/

.text-center {
    text-align: center;
}

/*
Flexbox(Flexible Box Layout Module) から*/

/*
Flexbox(Flexible Box Layout Module) 
共通部分
から*/
section
{
    padding: 60px 0; /* section要素の余白を上下60pxで揃える */
}
section .container
{
    width: 90%; /* sectionの中のインナーボックスをウィンドウ幅に対して90%に */
}
section h2
{
    font-size: 3.2rem;/* section要素見出しを32pxで揃える */
}
/*
Flexbox(Flexible Box Layout Module) 
共通部分
まで*/


.block-center,
section .container,
#skills i　　/*　.containerブロックも中央寄せにするため　　*/
{
    display: block;
margin-right: auto;
    margin-left: auto;
}
.abel,
section h2,
#skills h3,
#works .works-box a .works-box-inner .button-readmore
{
    font-family: 'Abel', sans-serif;
}
.uppercase,
section h2,
#skills h3,
#works .works-box a .works-box-inner .button-readmore
{
    text-transform: uppercase;　　/*　大文字にするため　　*/
}




#skills
{
    background-color: #bea300;
}
#skills .container
{
    /*　Flexboxでは、親要素にdisplay: flex;と指定するだけで、
    一番高い要素に合わせてすべての要素の高さを揃えてくれます。　　*/
    display: -webkit-flex;　　
    display:         flex;
    /*　justify-contentプロパティを使って要素の並び方の位置を左・横・中央に揃えたり、等間隔で揃えて配置
    両サイドのアイテムはそれぞれ端に、残りのアイテムを等間隔で配置　　*/
    justify-content: space-between;
}
#skills h2
{
    margin-bottom: 60px;
    color: #fdfcf6;
}

#skills .skill-box
{
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
            /*flexプロパティは、Flexboxでレイアウトした場合に横幅を指定することができます。
            横並びのFlexboxなので、 flex: 1; とすると、.skill-boxが全て1の横幅、
            つまり全て同じ幅になるように自動調整されます。 */
    -webkit-flex: 1;
            flex: 1;
    margin: 0px 10px;
    padding: 20px;
-webkit-border-radius: 4px;
       -moz-border-radius: 4px;
            border-radius: 4px;
    background-color: #fdfcf6;
}

#skills i
{
    font-size: 4.5rem;
-webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
    width: 80px;
    height: 80px;
    margin-bottom: 5px;
    padding-top: 15px;
text-align: center;
color: #fff;
    -webkit-border-radius: 50%;
       -moz-border-radius: 50%;
            border-radius: 50%;
    background-color: #14c0c9;
}
#skills h3
{
    font-size: 2.4rem;
    font-weight: bold;
margin-bottom: 10px;
color: #14c0c9;
}



/*
Flexbox(Flexible Box Layout Module) まで*/


/*
floatプロパティを使ったレイアウト方法 まで*/


/*
floatプロパティを使ったレイアウト方法 から*/
#works
{
    padding-bottom: 0;
}
#works h2
{
    margin-bottom: 50px;
}
#works .works-box
{
    float: left;
width: 33.33333%;
    height: 100%;
}
#works::after
{
    display: block;
    clear: both;
content: '';
}
/*
ロールオーバー時に.works-box-innerをサムネイル画像の上に重ねて表示させるためのスタイル から*/
#works .works-box a
{
    position: relative;
display: block;
}
#works .works-box a .works-box-inner
{
    position: absolute;
    top: 0;
    left: 0;
display: none;
height: 100%;
color: #fff;
    background-color: rgba(0, 0, 0, .7);
}

/*
ロールオーバー時に.works-box-innerをサムネイル画像の上に重ねて表示させるためのスタイル まで*/

/*絶対配置指定のボックスを上下左右の中央寄せにする場合は
top、bottom、left、rightの距離をすべて0にしておき、marginプロパティの値をautoにします。から*/
#works .works-box a .works-box-inner div
{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
height: 40%;
    margin: auto;
    padding: 10px 20px;
}
/*絶対配置指定のボックスを上下左右の中央寄せにする場合は
top、bottom、left、rightの距離をすべて0にしておき、marginプロパティの値をautoにします。 まで*/



#works .works-box a .works-box-inner h3
{
    font-size: 1.6rem;
    font-weight: bold;
margin: 0 0 5px;
}
#works .works-box a .works-box-inner small
{
    font-size: 1rem;
display: block;
margin-bottom: 15px;
}
#works .works-box a .works-box-inner .button-readmore
{
    font-size: 1rem;
    font-weight: bold;
display: block;
width: 180px;
    margin: auto;
    padding: 5px 0;
text-align: center;
color: #fff;
    -webkit-border-radius: 4px;
       -moz-border-radius: 4px;
            border-radius: 4px;
    background-color: #14c0c9;
}
/*サムネイル写真はウィンドウ幅に応じて伸縮し、ボックスからはみ出さないようにwidth: 100%;を指定しておきます。*/
#works .works-box img
{
    display: block;
max-width: 100%;
}

/*ロールオーバー時のスタイルを定義するには:hover擬似クラスを使用します。*/
style.css
#works .works-box a:hover .works-box-inner
{
    display: block;
width: 100%;
}
#works .works-box a .works-box-inner .button-readmore:hover
{
    background-color: #0f949b;
}
/*
display: inline-block;を使用してレイアウト から*/
/*
display: inline-block;で並べた要素をvertical-align: top;で上揃えします。
vertical-alignプロパティは縦方向の整列方法をbaseline、
text-top、text-bottom、middle、top、bottomなどの値で指定できます（インライン要素、またはテーブルセル要素のみ）。*/

#contact ul
{
    margin-top: 60px;
text-align: center;
}
#contact ul li
{
    font-size: 2.8rem;
display: inline-block;
-webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
    margin-right: 20px;
text-align: center;
/*vertical-align: top;で上揃え*/
    vertical-align: top;
}
#contact ul li:last-child
{
    margin-right: 0;
}

#contact ul .github,
#contact ul .skype
{
    font-size: 3.2rem;
}
#contact ul .github i
{
    margin-left: 2px;
}

#contact ul a
{
    display: block;
width: 50px;
    height: 50px;
color: #fff;
    -webkit-border-radius: 50%;
       -moz-border-radius: 50%;
            border-radius: 50%;
    background-color: #14c0c9;
}
#contact ul a:hover
{
    background-color: #0f949b;
}

/*
display: inline-block;を使用してレイアウト まで*/


/*
display:table-cell の使い方 から*/
ul.global_menu {
    display:table;
    table-layout:fixed;
    width:500px;
}
ul.global_menu li {
    display:table-cell;
    vertical-align:middle;
    text-align:center;
    background-color:red;
    border-left:1px solid white;
}
ul.global_menu li:first-child {
    border:none;    
}
ul.global_menu li a {
    display:block;
    text-decoration:none;
    color:white;
}
/*
display:table-cell の使い方 まで*/


